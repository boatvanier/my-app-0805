/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CartCreateRequest,
  CartResponse,
  CartUpdateRequest
} from '.././model';

import { axiosInstance } from '../../axiosInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export const updateCartItem = (
    userId: number,
    bookId: number,
    cartUpdateRequest: CartUpdateRequest,
 ) => {
      
      
      return axiosInstance<null>(
      {url: `/api/carts/${userId}/books/${bookId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: cartUpdateRequest
    },
      );
    }
  


export const getUpdateCartItemMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCartItem>>, TError,{userId: number;bookId: number;data: CartUpdateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateCartItem>>, TError,{userId: number;bookId: number;data: CartUpdateRequest}, TContext> => {

const mutationKey = ['updateCartItem'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCartItem>>, {userId: number;bookId: number;data: CartUpdateRequest}> = (props) => {
          const {userId,bookId,data} = props ?? {};

          return  updateCartItem(userId,bookId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCartItemMutationResult = NonNullable<Awaited<ReturnType<typeof updateCartItem>>>
    export type UpdateCartItemMutationBody = CartUpdateRequest
    export type UpdateCartItemMutationError = unknown

    export const useUpdateCartItem = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCartItem>>, TError,{userId: number;bookId: number;data: CartUpdateRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateCartItem>>,
        TError,
        {userId: number;bookId: number;data: CartUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateCartItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteCartItem = (
    userId: number,
    bookId: number,
 ) => {
      
      
      return axiosInstance<null>(
      {url: `/api/carts/${userId}/books/${bookId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteCartItemMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCartItem>>, TError,{userId: number;bookId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteCartItem>>, TError,{userId: number;bookId: number}, TContext> => {

const mutationKey = ['deleteCartItem'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCartItem>>, {userId: number;bookId: number}> = (props) => {
          const {userId,bookId} = props ?? {};

          return  deleteCartItem(userId,bookId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCartItemMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCartItem>>>
    
    export type DeleteCartItemMutationError = unknown

    export const useDeleteCartItem = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCartItem>>, TError,{userId: number;bookId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteCartItem>>,
        TError,
        {userId: number;bookId: number},
        TContext
      > => {

      const mutationOptions = getDeleteCartItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const createCartItem = (
    userId: number,
    cartCreateRequest: CartCreateRequest,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/api/carts/${userId}/books`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: cartCreateRequest, signal
    },
      );
    }
  


export const getCreateCartItemMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCartItem>>, TError,{userId: number;data: CartCreateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createCartItem>>, TError,{userId: number;data: CartCreateRequest}, TContext> => {

const mutationKey = ['createCartItem'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCartItem>>, {userId: number;data: CartCreateRequest}> = (props) => {
          const {userId,data} = props ?? {};

          return  createCartItem(userId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCartItemMutationResult = NonNullable<Awaited<ReturnType<typeof createCartItem>>>
    export type CreateCartItemMutationBody = CartCreateRequest
    export type CreateCartItemMutationError = unknown

    export const useCreateCartItem = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCartItem>>, TError,{userId: number;data: CartCreateRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createCartItem>>,
        TError,
        {userId: number;data: CartCreateRequest},
        TContext
      > => {

      const mutationOptions = getCreateCartItemMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getCart = (
    userId: number,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<CartResponse[]>(
      {url: `/api/carts/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetCartQueryKey = (userId?: number,) => {
    return [`/api/carts/${userId}`] as const;
    }

    
export const getGetCartQueryOptions = <TData = Awaited<ReturnType<typeof getCart>>, TError = unknown>(userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCartQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCart>>> = ({ signal }) => getCart(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCartQueryResult = NonNullable<Awaited<ReturnType<typeof getCart>>>
export type GetCartQueryError = unknown


export function useGetCart<TData = Awaited<ReturnType<typeof getCart>>, TError = unknown>(
 userId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCart>>,
          TError,
          Awaited<ReturnType<typeof getCart>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCart<TData = Awaited<ReturnType<typeof getCart>>, TError = unknown>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCart>>,
          TError,
          Awaited<ReturnType<typeof getCart>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCart<TData = Awaited<ReturnType<typeof getCart>>, TError = unknown>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetCart<TData = Awaited<ReturnType<typeof getCart>>, TError = unknown>(
 userId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCart>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCartQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



