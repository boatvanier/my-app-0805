/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  BookRequest,
  BookResponse,
  GetBooksParams
} from '.././model';

import { axiosInstance } from '../../axiosInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export const getBook = (
    bookId: number,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<BookResponse>(
      {url: `/api/books/${bookId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetBookQueryKey = (bookId?: number,) => {
    return [`/api/books/${bookId}`] as const;
    }

    
export const getGetBookQueryOptions = <TData = Awaited<ReturnType<typeof getBook>>, TError = unknown>(bookId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBook>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBookQueryKey(bookId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBook>>> = ({ signal }) => getBook(bookId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(bookId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBook>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBookQueryResult = NonNullable<Awaited<ReturnType<typeof getBook>>>
export type GetBookQueryError = unknown


export function useGetBook<TData = Awaited<ReturnType<typeof getBook>>, TError = unknown>(
 bookId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBook>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBook>>,
          TError,
          Awaited<ReturnType<typeof getBook>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBook<TData = Awaited<ReturnType<typeof getBook>>, TError = unknown>(
 bookId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBook>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBook>>,
          TError,
          Awaited<ReturnType<typeof getBook>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBook<TData = Awaited<ReturnType<typeof getBook>>, TError = unknown>(
 bookId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBook>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBook<TData = Awaited<ReturnType<typeof getBook>>, TError = unknown>(
 bookId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBook>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBookQueryOptions(bookId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateBook = (
    bookId: number,
    bookRequest: BookRequest,
 ) => {
      
      
      return axiosInstance<null>(
      {url: `/api/books/${bookId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: bookRequest
    },
      );
    }
  


export const getUpdateBookMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBook>>, TError,{bookId: number;data: BookRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateBook>>, TError,{bookId: number;data: BookRequest}, TContext> => {

const mutationKey = ['updateBook'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateBook>>, {bookId: number;data: BookRequest}> = (props) => {
          const {bookId,data} = props ?? {};

          return  updateBook(bookId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateBookMutationResult = NonNullable<Awaited<ReturnType<typeof updateBook>>>
    export type UpdateBookMutationBody = BookRequest
    export type UpdateBookMutationError = unknown

    export const useUpdateBook = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBook>>, TError,{bookId: number;data: BookRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateBook>>,
        TError,
        {bookId: number;data: BookRequest},
        TContext
      > => {

      const mutationOptions = getUpdateBookMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteBook = (
    bookId: number,
 ) => {
      
      
      return axiosInstance<null>(
      {url: `/api/books/${bookId}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteBookMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteBook>>, TError,{bookId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteBook>>, TError,{bookId: number}, TContext> => {

const mutationKey = ['deleteBook'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteBook>>, {bookId: number}> = (props) => {
          const {bookId} = props ?? {};

          return  deleteBook(bookId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteBookMutationResult = NonNullable<Awaited<ReturnType<typeof deleteBook>>>
    
    export type DeleteBookMutationError = unknown

    export const useDeleteBook = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteBook>>, TError,{bookId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteBook>>,
        TError,
        {bookId: number},
        TContext
      > => {

      const mutationOptions = getDeleteBookMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getBooks = (
    params?: GetBooksParams,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<BookResponse[]>(
      {url: `/api/books`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetBooksQueryKey = (params?: GetBooksParams,) => {
    return [`/api/books`, ...(params ? [params]: [])] as const;
    }

    
export const getGetBooksQueryOptions = <TData = Awaited<ReturnType<typeof getBooks>>, TError = unknown>(params?: GetBooksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooks>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBooksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBooks>>> = ({ signal }) => getBooks(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBooks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBooksQueryResult = NonNullable<Awaited<ReturnType<typeof getBooks>>>
export type GetBooksQueryError = unknown


export function useGetBooks<TData = Awaited<ReturnType<typeof getBooks>>, TError = unknown>(
 params: undefined |  GetBooksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooks>>,
          TError,
          Awaited<ReturnType<typeof getBooks>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooks<TData = Awaited<ReturnType<typeof getBooks>>, TError = unknown>(
 params?: GetBooksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBooks>>,
          TError,
          Awaited<ReturnType<typeof getBooks>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBooks<TData = Awaited<ReturnType<typeof getBooks>>, TError = unknown>(
 params?: GetBooksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooks>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBooks<TData = Awaited<ReturnType<typeof getBooks>>, TError = unknown>(
 params?: GetBooksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBooks>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBooksQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const createBook = (
    bookRequest: BookRequest,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/api/books`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: bookRequest, signal
    },
      );
    }
  


export const getCreateBookMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBook>>, TError,{data: BookRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createBook>>, TError,{data: BookRequest}, TContext> => {

const mutationKey = ['createBook'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createBook>>, {data: BookRequest}> = (props) => {
          const {data} = props ?? {};

          return  createBook(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateBookMutationResult = NonNullable<Awaited<ReturnType<typeof createBook>>>
    export type CreateBookMutationBody = BookRequest
    export type CreateBookMutationError = unknown

    export const useCreateBook = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBook>>, TError,{data: BookRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createBook>>,
        TError,
        {data: BookRequest},
        TContext
      > => {

      const mutationOptions = getCreateBookMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    